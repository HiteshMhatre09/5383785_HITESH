#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int *arr;
    int size;
    int capacity;
} MinHeap;

MinHeap* createHeap(int capacity) {
    MinHeap* h = malloc(sizeof(MinHeap));
    h->arr = malloc(sizeof(int) * capacity);
    h->size = 0;
    h->capacity = capacity;
    return h;
}

void swap(int *a, int *b) { int t = *a; *a = *b; *b = t; }

void heapifyUp(MinHeap* h, int idx) {
    while (idx > 0) {
        int parent = (idx - 1) / 2;
        if (h->arr[parent] <= h->arr[idx]) break;
        swap(&h->arr[parent], &h->arr[idx]);
        idx = parent;
    }
}

void heapifyDown(MinHeap* h, int idx) {
    int left, right, smallest;
    while (1) {
        left = 2 * idx + 1;
        right = 2 * idx + 2;
        smallest = idx;
        if (left < h->size && h->arr[left] < h->arr[smallest]) smallest = left;
        if (right < h->size && h->arr[right] < h->arr[smallest]) smallest = right;
        if (smallest == idx) break;
        swap(&h->arr[smallest], &h->arr[idx]);
        idx = smallest;
    }
}

void insert(MinHeap* h, int val) {
    if (h->size == h->capacity) return;
    h->arr[h->size] = val;
    heapifyUp(h, h->size);
    h->size++;
}

void delete(MinHeap* h, int val) {
    int idx = -1;
    for (int i = 0; i < h->size; i++) if (h->arr[i] == val) { idx = i; break; }
    if (idx == -1) return;
    h->arr[idx] = h->arr[h->size - 1];
    h->size--;
    heapifyUp(h, idx);
    heapifyDown(h, idx);
}

int getMin(MinHeap* h) { return h->arr[0]; }

int main() {
    int q;
    scanf("%d", &q);
    MinHeap* h = createHeap(q);
    for (int i = 0; i < q; i++) {
        int type, val;
        scanf("%d", &type);
        if (type == 1) {
            scanf("%d", &val);
            insert(h, val);
        } else if (type == 2) {
            scanf("%d", &val);
            delete(h, val);
        } else if (type == 3) {
            printf("%d\n", getMin(h));
        }
    }
    free(h->arr);
    free(h);
    return 0;
}
